type OrderFilled @entity(immutable: true) {
    id: Bytes!
    TWAP_id: Int
    twapAddress: String!
    userAddress: Bytes! # address
    exchange: Bytes! # address
    dex: String!
    taker: Bytes! # address
    srcAmountIn: String!
    dstAmountOut: String!
    dstFee: BigInt! # uint256
    dexFee: String
    srcFilledAmount: BigInt! # uint256
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    timestamp: String!
    srcTokenAddress: String
    dstTokenAddress: String
    srcTokenSymbol: String
    dstTokenSymbol: String
    dollarValueIn: BigDecimal!
    dollarValueOut: BigDecimal!
    type: String!
}

type FilledDaily @entity {
    id: String!
    date: String!
    dailyTotalCalculatedValue: BigDecimal!
    dailyCount: Int
    dex: String!
}

type FilledTotal @entity {
    id: String!
    cumulativeTotalCalculatedValue: BigDecimal!
    totalCount: Int
}

type DailyActiveUsers @entity {
    id: String!
    userAddresses: [String!]!
    count: Int!
}

type OrderCreated @entity(immutable: true) {
    id: Bytes!
    Contract_id: BigInt! # uint64
    twapAddress: String!
    maker: Bytes! # address
    exchange: Bytes! # address
    ask_exchange: Bytes! # address
    ask_srcToken: Bytes! # address
    ask_dstToken: Bytes! # address
    ask_srcAmount: BigInt! # uint256
    ask_srcBidAmount: BigInt! # uint256
    ask_dstMinAmount: BigInt! # uint256
    ask_deadline: BigInt! # uint32
    ask_bidDelay: BigInt! # uint32
    ask_fillDelay: BigInt! # uint32
    ask_data: Bytes! # bytes
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    srcTokenSymbol: String
    dstTokenSymbol: String
    dollarValueIn: BigDecimal!
    timestamp: String!
    dex: String!
    type: String!
}

type CreatedDaily @entity {
    id: String!
    date: String!
#    dailyTotalCalculatedValue: BigDecimal
    dailyCount: Int
    dex: String!
}

type CreatedTotal @entity {
    id: String!
#    cumulativeTotalCalculatedValue: BigDecimal
    totalCount: Int
}

type Status @entity {
    id: String!
    status: String
}

type StatusNew @entity {
    id: String!
    twapId: String!
    twapAddress: String!
    status: String
}

type OutputTokens @entity {
    id: String!
    tokenAddresses: [String!]!
}