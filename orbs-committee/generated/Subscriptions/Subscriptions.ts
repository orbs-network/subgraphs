// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class ContractRegistryAddressUpdated extends ethereum.Event {
  get params(): ContractRegistryAddressUpdated__Params {
    return new ContractRegistryAddressUpdated__Params(this);
  }
}

export class ContractRegistryAddressUpdated__Params {
  _event: ContractRegistryAddressUpdated;

  constructor(event: ContractRegistryAddressUpdated) {
    this._event = event;
  }

  get addr(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class GenesisRefTimeDelayChanged extends ethereum.Event {
  get params(): GenesisRefTimeDelayChanged__Params {
    return new GenesisRefTimeDelayChanged__Params(this);
  }
}

export class GenesisRefTimeDelayChanged__Params {
  _event: GenesisRefTimeDelayChanged;

  constructor(event: GenesisRefTimeDelayChanged) {
    this._event = event;
  }

  get newGenesisRefTimeDelay(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class InitializationComplete extends ethereum.Event {
  get params(): InitializationComplete__Params {
    return new InitializationComplete__Params(this);
  }
}

export class InitializationComplete__Params {
  _event: InitializationComplete;

  constructor(event: InitializationComplete) {
    this._event = event;
  }
}

export class Locked extends ethereum.Event {
  get params(): Locked__Params {
    return new Locked__Params(this);
  }
}

export class Locked__Params {
  _event: Locked;

  constructor(event: Locked) {
    this._event = event;
  }
}

export class MinimumInitialVcPaymentChanged extends ethereum.Event {
  get params(): MinimumInitialVcPaymentChanged__Params {
    return new MinimumInitialVcPaymentChanged__Params(this);
  }
}

export class MinimumInitialVcPaymentChanged__Params {
  _event: MinimumInitialVcPaymentChanged;

  constructor(event: MinimumInitialVcPaymentChanged) {
    this._event = event;
  }

  get newMinimumInitialVcPayment(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Payment extends ethereum.Event {
  get params(): Payment__Params {
    return new Payment__Params(this);
  }
}

export class Payment__Params {
  _event: Payment;

  constructor(event: Payment) {
    this._event = event;
  }

  get vcId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get by(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tier(): string {
    return this._event.parameters[3].value.toString();
  }

  get rate(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class RegistryManagementTransferred extends ethereum.Event {
  get params(): RegistryManagementTransferred__Params {
    return new RegistryManagementTransferred__Params(this);
  }
}

export class RegistryManagementTransferred__Params {
  _event: RegistryManagementTransferred;

  constructor(event: RegistryManagementTransferred) {
    this._event = event;
  }

  get previousRegistryAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newRegistryAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SubscriberAdded extends ethereum.Event {
  get params(): SubscriberAdded__Params {
    return new SubscriberAdded__Params(this);
  }
}

export class SubscriberAdded__Params {
  _event: SubscriberAdded;

  constructor(event: SubscriberAdded) {
    this._event = event;
  }

  get subscriber(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SubscriberRemoved extends ethereum.Event {
  get params(): SubscriberRemoved__Params {
    return new SubscriberRemoved__Params(this);
  }
}

export class SubscriberRemoved__Params {
  _event: SubscriberRemoved;

  constructor(event: SubscriberRemoved) {
    this._event = event;
  }

  get subscriber(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SubscriptionChanged extends ethereum.Event {
  get params(): SubscriptionChanged__Params {
    return new SubscriptionChanged__Params(this);
  }
}

export class SubscriptionChanged__Params {
  _event: SubscriptionChanged;

  constructor(event: SubscriptionChanged) {
    this._event = event;
  }

  get vcId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[2].value.toString();
  }

  get genRefTime(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get tier(): string {
    return this._event.parameters[4].value.toString();
  }

  get rate(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get expiresAt(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get isCertified(): boolean {
    return this._event.parameters[7].value.toBoolean();
  }

  get deploymentSubset(): string {
    return this._event.parameters[8].value.toString();
  }
}

export class Unlocked extends ethereum.Event {
  get params(): Unlocked__Params {
    return new Unlocked__Params(this);
  }
}

export class Unlocked__Params {
  _event: Unlocked;

  constructor(event: Unlocked) {
    this._event = event;
  }
}

export class VcConfigRecordChanged extends ethereum.Event {
  get params(): VcConfigRecordChanged__Params {
    return new VcConfigRecordChanged__Params(this);
  }
}

export class VcConfigRecordChanged__Params {
  _event: VcConfigRecordChanged;

  constructor(event: VcConfigRecordChanged) {
    this._event = event;
  }

  get vcId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get key(): string {
    return this._event.parameters[1].value.toString();
  }

  get value(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class VcCreated extends ethereum.Event {
  get params(): VcCreated__Params {
    return new VcCreated__Params(this);
  }
}

export class VcCreated__Params {
  _event: VcCreated;

  constructor(event: VcCreated) {
    this._event = event;
  }

  get vcId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class VcOwnerChanged extends ethereum.Event {
  get params(): VcOwnerChanged__Params {
    return new VcOwnerChanged__Params(this);
  }
}

export class VcOwnerChanged__Params {
  _event: VcOwnerChanged;

  constructor(event: VcOwnerChanged) {
    this._event = event;
  }

  get vcId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get previousOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Subscriptions__createVCResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getVcId(): BigInt {
    return this.value0;
  }

  getGenRefTime(): BigInt {
    return this.value1;
  }
}

export class Subscriptions__getSettingsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getGenesisRefTimeDelay(): BigInt {
    return this.value0;
  }

  getMinimumInitialVcPayment(): BigInt {
    return this.value1;
  }
}

export class Subscriptions__getVcDataResult {
  value0: string;
  value1: string;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: Address;
  value6: string;
  value7: boolean;

  constructor(
    value0: string,
    value1: string,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: Address,
    value6: string,
    value7: boolean,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromAddress(this.value5));
    map.set("value6", ethereum.Value.fromString(this.value6));
    map.set("value7", ethereum.Value.fromBoolean(this.value7));
    return map;
  }

  getName(): string {
    return this.value0;
  }

  getTier(): string {
    return this.value1;
  }

  getRate(): BigInt {
    return this.value2;
  }

  getExpiresAt(): BigInt {
    return this.value3;
  }

  getGenRefTime(): BigInt {
    return this.value4;
  }

  getOwner(): Address {
    return this.value5;
  }

  getDeploymentSubset(): string {
    return this.value6;
  }

  getIsCertified(): boolean {
    return this.value7;
  }
}

export class Subscriptions extends ethereum.SmartContract {
  static bind(address: Address): Subscriptions {
    return new Subscriptions("Subscriptions", address);
  }

  authorizedSubscribers(param0: Address): boolean {
    let result = super.call(
      "authorizedSubscribers",
      "authorizedSubscribers(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBoolean();
  }

  try_authorizedSubscribers(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "authorizedSubscribers",
      "authorizedSubscribers(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  createVC(
    name: string,
    tier: string,
    rate: BigInt,
    amount: BigInt,
    owner: Address,
    isCertified: boolean,
    deploymentSubset: string,
  ): Subscriptions__createVCResult {
    let result = super.call(
      "createVC",
      "createVC(string,string,uint256,uint256,address,bool,string):(uint256,uint256)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(tier),
        ethereum.Value.fromUnsignedBigInt(rate),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromBoolean(isCertified),
        ethereum.Value.fromString(deploymentSubset),
      ],
    );

    return new Subscriptions__createVCResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_createVC(
    name: string,
    tier: string,
    rate: BigInt,
    amount: BigInt,
    owner: Address,
    isCertified: boolean,
    deploymentSubset: string,
  ): ethereum.CallResult<Subscriptions__createVCResult> {
    let result = super.tryCall(
      "createVC",
      "createVC(string,string,uint256,uint256,address,bool,string):(uint256,uint256)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(tier),
        ethereum.Value.fromUnsignedBigInt(rate),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromBoolean(isCertified),
        ethereum.Value.fromString(deploymentSubset),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Subscriptions__createVCResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }

  erc20(): Address {
    let result = super.call("erc20", "erc20():(address)", []);

    return result[0].toAddress();
  }

  try_erc20(): ethereum.CallResult<Address> {
    let result = super.tryCall("erc20", "erc20():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getContractRegistry(): Address {
    let result = super.call(
      "getContractRegistry",
      "getContractRegistry():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_getContractRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getContractRegistry",
      "getContractRegistry():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getGenesisRefTimeDelay(): BigInt {
    let result = super.call(
      "getGenesisRefTimeDelay",
      "getGenesisRefTimeDelay():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getGenesisRefTimeDelay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getGenesisRefTimeDelay",
      "getGenesisRefTimeDelay():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMinimumInitialVcPayment(): BigInt {
    let result = super.call(
      "getMinimumInitialVcPayment",
      "getMinimumInitialVcPayment():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getMinimumInitialVcPayment(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMinimumInitialVcPayment",
      "getMinimumInitialVcPayment():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSettings(): Subscriptions__getSettingsResult {
    let result = super.call(
      "getSettings",
      "getSettings():(uint256,uint256)",
      [],
    );

    return new Subscriptions__getSettingsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_getSettings(): ethereum.CallResult<Subscriptions__getSettingsResult> {
    let result = super.tryCall(
      "getSettings",
      "getSettings():(uint256,uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Subscriptions__getSettingsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }

  getVcConfigRecord(vcId: BigInt, key: string): string {
    let result = super.call(
      "getVcConfigRecord",
      "getVcConfigRecord(uint256,string):(string)",
      [ethereum.Value.fromUnsignedBigInt(vcId), ethereum.Value.fromString(key)],
    );

    return result[0].toString();
  }

  try_getVcConfigRecord(
    vcId: BigInt,
    key: string,
  ): ethereum.CallResult<string> {
    let result = super.tryCall(
      "getVcConfigRecord",
      "getVcConfigRecord(uint256,string):(string)",
      [ethereum.Value.fromUnsignedBigInt(vcId), ethereum.Value.fromString(key)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getVcData(vcId: BigInt): Subscriptions__getVcDataResult {
    let result = super.call(
      "getVcData",
      "getVcData(uint256):(string,string,uint256,uint256,uint256,address,string,bool)",
      [ethereum.Value.fromUnsignedBigInt(vcId)],
    );

    return new Subscriptions__getVcDataResult(
      result[0].toString(),
      result[1].toString(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toAddress(),
      result[6].toString(),
      result[7].toBoolean(),
    );
  }

  try_getVcData(
    vcId: BigInt,
  ): ethereum.CallResult<Subscriptions__getVcDataResult> {
    let result = super.tryCall(
      "getVcData",
      "getVcData(uint256):(string,string,uint256,uint256,uint256,address,string,bool)",
      [ethereum.Value.fromUnsignedBigInt(vcId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Subscriptions__getVcDataResult(
        value[0].toString(),
        value[1].toString(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toAddress(),
        value[6].toString(),
        value[7].toBoolean(),
      ),
    );
  }

  initializationAdmin(): Address {
    let result = super.call(
      "initializationAdmin",
      "initializationAdmin():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_initializationAdmin(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "initializationAdmin",
      "initializationAdmin():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isInitializationComplete(): boolean {
    let result = super.call(
      "isInitializationComplete",
      "isInitializationComplete():(bool)",
      [],
    );

    return result[0].toBoolean();
  }

  try_isInitializationComplete(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isInitializationComplete",
      "isInitializationComplete():(bool)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isLocked(): boolean {
    let result = super.call("isLocked", "isLocked():(bool)", []);

    return result[0].toBoolean();
  }

  try_isLocked(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isLocked", "isLocked():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isRegistryAdmin(): boolean {
    let result = super.call("isRegistryAdmin", "isRegistryAdmin():(bool)", []);

    return result[0].toBoolean();
  }

  try_isRegistryAdmin(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isRegistryAdmin",
      "isRegistryAdmin():(bool)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  locked(): boolean {
    let result = super.call("locked", "locked():(bool)", []);

    return result[0].toBoolean();
  }

  try_locked(): ethereum.CallResult<boolean> {
    let result = super.tryCall("locked", "locked():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  nextVcId(): BigInt {
    let result = super.call("nextVcId", "nextVcId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_nextVcId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nextVcId", "nextVcId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pendingRegistryAdmin(): Address {
    let result = super.call(
      "pendingRegistryAdmin",
      "pendingRegistryAdmin():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_pendingRegistryAdmin(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "pendingRegistryAdmin",
      "pendingRegistryAdmin():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  registryAdmin(): Address {
    let result = super.call("registryAdmin", "registryAdmin():(address)", []);

    return result[0].toAddress();
  }

  try_registryAdmin(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "registryAdmin",
      "registryAdmin():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _contractRegistry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _registryAdmin(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _erc20(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _genesisRefTimeDelay(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _minimumInitialVcPayment(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get vcIds(): Array<BigInt> {
    return this._call.inputValues[5].value.toBigIntArray();
  }

  get initialNextVcId(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get previousSubscriptionsContract(): Address {
    return this._call.inputValues[7].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddSubscriberCall extends ethereum.Call {
  get inputs(): AddSubscriberCall__Inputs {
    return new AddSubscriberCall__Inputs(this);
  }

  get outputs(): AddSubscriberCall__Outputs {
    return new AddSubscriberCall__Outputs(this);
  }
}

export class AddSubscriberCall__Inputs {
  _call: AddSubscriberCall;

  constructor(call: AddSubscriberCall) {
    this._call = call;
  }

  get addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddSubscriberCall__Outputs {
  _call: AddSubscriberCall;

  constructor(call: AddSubscriberCall) {
    this._call = call;
  }
}

export class ClaimRegistryManagementCall extends ethereum.Call {
  get inputs(): ClaimRegistryManagementCall__Inputs {
    return new ClaimRegistryManagementCall__Inputs(this);
  }

  get outputs(): ClaimRegistryManagementCall__Outputs {
    return new ClaimRegistryManagementCall__Outputs(this);
  }
}

export class ClaimRegistryManagementCall__Inputs {
  _call: ClaimRegistryManagementCall;

  constructor(call: ClaimRegistryManagementCall) {
    this._call = call;
  }
}

export class ClaimRegistryManagementCall__Outputs {
  _call: ClaimRegistryManagementCall;

  constructor(call: ClaimRegistryManagementCall) {
    this._call = call;
  }
}

export class CreateVCCall extends ethereum.Call {
  get inputs(): CreateVCCall__Inputs {
    return new CreateVCCall__Inputs(this);
  }

  get outputs(): CreateVCCall__Outputs {
    return new CreateVCCall__Outputs(this);
  }
}

export class CreateVCCall__Inputs {
  _call: CreateVCCall;

  constructor(call: CreateVCCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get tier(): string {
    return this._call.inputValues[1].value.toString();
  }

  get rate(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get owner(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get isCertified(): boolean {
    return this._call.inputValues[5].value.toBoolean();
  }

  get deploymentSubset(): string {
    return this._call.inputValues[6].value.toString();
  }
}

export class CreateVCCall__Outputs {
  _call: CreateVCCall;

  constructor(call: CreateVCCall) {
    this._call = call;
  }

  get vcId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get genRefTime(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class ExtendSubscriptionCall extends ethereum.Call {
  get inputs(): ExtendSubscriptionCall__Inputs {
    return new ExtendSubscriptionCall__Inputs(this);
  }

  get outputs(): ExtendSubscriptionCall__Outputs {
    return new ExtendSubscriptionCall__Outputs(this);
  }
}

export class ExtendSubscriptionCall__Inputs {
  _call: ExtendSubscriptionCall;

  constructor(call: ExtendSubscriptionCall) {
    this._call = call;
  }

  get vcId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get tier(): string {
    return this._call.inputValues[2].value.toString();
  }

  get rate(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get payer(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class ExtendSubscriptionCall__Outputs {
  _call: ExtendSubscriptionCall;

  constructor(call: ExtendSubscriptionCall) {
    this._call = call;
  }
}

export class ImportSubscriptionCall extends ethereum.Call {
  get inputs(): ImportSubscriptionCall__Inputs {
    return new ImportSubscriptionCall__Inputs(this);
  }

  get outputs(): ImportSubscriptionCall__Outputs {
    return new ImportSubscriptionCall__Outputs(this);
  }
}

export class ImportSubscriptionCall__Inputs {
  _call: ImportSubscriptionCall;

  constructor(call: ImportSubscriptionCall) {
    this._call = call;
  }

  get vcId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get previousSubscriptionsContract(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ImportSubscriptionCall__Outputs {
  _call: ImportSubscriptionCall;

  constructor(call: ImportSubscriptionCall) {
    this._call = call;
  }
}

export class InitializationCompleteCall extends ethereum.Call {
  get inputs(): InitializationCompleteCall__Inputs {
    return new InitializationCompleteCall__Inputs(this);
  }

  get outputs(): InitializationCompleteCall__Outputs {
    return new InitializationCompleteCall__Outputs(this);
  }
}

export class InitializationCompleteCall__Inputs {
  _call: InitializationCompleteCall;

  constructor(call: InitializationCompleteCall) {
    this._call = call;
  }
}

export class InitializationCompleteCall__Outputs {
  _call: InitializationCompleteCall;

  constructor(call: InitializationCompleteCall) {
    this._call = call;
  }
}

export class LockCall extends ethereum.Call {
  get inputs(): LockCall__Inputs {
    return new LockCall__Inputs(this);
  }

  get outputs(): LockCall__Outputs {
    return new LockCall__Outputs(this);
  }
}

export class LockCall__Inputs {
  _call: LockCall;

  constructor(call: LockCall) {
    this._call = call;
  }
}

export class LockCall__Outputs {
  _call: LockCall;

  constructor(call: LockCall) {
    this._call = call;
  }
}

export class RefreshContractsCall extends ethereum.Call {
  get inputs(): RefreshContractsCall__Inputs {
    return new RefreshContractsCall__Inputs(this);
  }

  get outputs(): RefreshContractsCall__Outputs {
    return new RefreshContractsCall__Outputs(this);
  }
}

export class RefreshContractsCall__Inputs {
  _call: RefreshContractsCall;

  constructor(call: RefreshContractsCall) {
    this._call = call;
  }
}

export class RefreshContractsCall__Outputs {
  _call: RefreshContractsCall;

  constructor(call: RefreshContractsCall) {
    this._call = call;
  }
}

export class RemoveSubscriberCall extends ethereum.Call {
  get inputs(): RemoveSubscriberCall__Inputs {
    return new RemoveSubscriberCall__Inputs(this);
  }

  get outputs(): RemoveSubscriberCall__Outputs {
    return new RemoveSubscriberCall__Outputs(this);
  }
}

export class RemoveSubscriberCall__Inputs {
  _call: RemoveSubscriberCall;

  constructor(call: RemoveSubscriberCall) {
    this._call = call;
  }

  get addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveSubscriberCall__Outputs {
  _call: RemoveSubscriberCall;

  constructor(call: RemoveSubscriberCall) {
    this._call = call;
  }
}

export class RenounceRegistryManagementCall extends ethereum.Call {
  get inputs(): RenounceRegistryManagementCall__Inputs {
    return new RenounceRegistryManagementCall__Inputs(this);
  }

  get outputs(): RenounceRegistryManagementCall__Outputs {
    return new RenounceRegistryManagementCall__Outputs(this);
  }
}

export class RenounceRegistryManagementCall__Inputs {
  _call: RenounceRegistryManagementCall;

  constructor(call: RenounceRegistryManagementCall) {
    this._call = call;
  }
}

export class RenounceRegistryManagementCall__Outputs {
  _call: RenounceRegistryManagementCall;

  constructor(call: RenounceRegistryManagementCall) {
    this._call = call;
  }
}

export class SetContractRegistryCall extends ethereum.Call {
  get inputs(): SetContractRegistryCall__Inputs {
    return new SetContractRegistryCall__Inputs(this);
  }

  get outputs(): SetContractRegistryCall__Outputs {
    return new SetContractRegistryCall__Outputs(this);
  }
}

export class SetContractRegistryCall__Inputs {
  _call: SetContractRegistryCall;

  constructor(call: SetContractRegistryCall) {
    this._call = call;
  }

  get newContractRegistry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetContractRegistryCall__Outputs {
  _call: SetContractRegistryCall;

  constructor(call: SetContractRegistryCall) {
    this._call = call;
  }
}

export class SetGenesisRefTimeDelayCall extends ethereum.Call {
  get inputs(): SetGenesisRefTimeDelayCall__Inputs {
    return new SetGenesisRefTimeDelayCall__Inputs(this);
  }

  get outputs(): SetGenesisRefTimeDelayCall__Outputs {
    return new SetGenesisRefTimeDelayCall__Outputs(this);
  }
}

export class SetGenesisRefTimeDelayCall__Inputs {
  _call: SetGenesisRefTimeDelayCall;

  constructor(call: SetGenesisRefTimeDelayCall) {
    this._call = call;
  }

  get newGenesisRefTimeDelay(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetGenesisRefTimeDelayCall__Outputs {
  _call: SetGenesisRefTimeDelayCall;

  constructor(call: SetGenesisRefTimeDelayCall) {
    this._call = call;
  }
}

export class SetMinimumInitialVcPaymentCall extends ethereum.Call {
  get inputs(): SetMinimumInitialVcPaymentCall__Inputs {
    return new SetMinimumInitialVcPaymentCall__Inputs(this);
  }

  get outputs(): SetMinimumInitialVcPaymentCall__Outputs {
    return new SetMinimumInitialVcPaymentCall__Outputs(this);
  }
}

export class SetMinimumInitialVcPaymentCall__Inputs {
  _call: SetMinimumInitialVcPaymentCall;

  constructor(call: SetMinimumInitialVcPaymentCall) {
    this._call = call;
  }

  get newMinimumInitialVcPayment(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMinimumInitialVcPaymentCall__Outputs {
  _call: SetMinimumInitialVcPaymentCall;

  constructor(call: SetMinimumInitialVcPaymentCall) {
    this._call = call;
  }
}

export class SetRegistryAdminCall extends ethereum.Call {
  get inputs(): SetRegistryAdminCall__Inputs {
    return new SetRegistryAdminCall__Inputs(this);
  }

  get outputs(): SetRegistryAdminCall__Outputs {
    return new SetRegistryAdminCall__Outputs(this);
  }
}

export class SetRegistryAdminCall__Inputs {
  _call: SetRegistryAdminCall;

  constructor(call: SetRegistryAdminCall) {
    this._call = call;
  }

  get _registryAdmin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetRegistryAdminCall__Outputs {
  _call: SetRegistryAdminCall;

  constructor(call: SetRegistryAdminCall) {
    this._call = call;
  }
}

export class SetVcConfigRecordCall extends ethereum.Call {
  get inputs(): SetVcConfigRecordCall__Inputs {
    return new SetVcConfigRecordCall__Inputs(this);
  }

  get outputs(): SetVcConfigRecordCall__Outputs {
    return new SetVcConfigRecordCall__Outputs(this);
  }
}

export class SetVcConfigRecordCall__Inputs {
  _call: SetVcConfigRecordCall;

  constructor(call: SetVcConfigRecordCall) {
    this._call = call;
  }

  get vcId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get key(): string {
    return this._call.inputValues[1].value.toString();
  }

  get value(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class SetVcConfigRecordCall__Outputs {
  _call: SetVcConfigRecordCall;

  constructor(call: SetVcConfigRecordCall) {
    this._call = call;
  }
}

export class SetVcOwnerCall extends ethereum.Call {
  get inputs(): SetVcOwnerCall__Inputs {
    return new SetVcOwnerCall__Inputs(this);
  }

  get outputs(): SetVcOwnerCall__Outputs {
    return new SetVcOwnerCall__Outputs(this);
  }
}

export class SetVcOwnerCall__Inputs {
  _call: SetVcOwnerCall;

  constructor(call: SetVcOwnerCall) {
    this._call = call;
  }

  get vcId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get owner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetVcOwnerCall__Outputs {
  _call: SetVcOwnerCall;

  constructor(call: SetVcOwnerCall) {
    this._call = call;
  }
}

export class TransferRegistryManagementCall extends ethereum.Call {
  get inputs(): TransferRegistryManagementCall__Inputs {
    return new TransferRegistryManagementCall__Inputs(this);
  }

  get outputs(): TransferRegistryManagementCall__Outputs {
    return new TransferRegistryManagementCall__Outputs(this);
  }
}

export class TransferRegistryManagementCall__Inputs {
  _call: TransferRegistryManagementCall;

  constructor(call: TransferRegistryManagementCall) {
    this._call = call;
  }

  get newRegistryAdmin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferRegistryManagementCall__Outputs {
  _call: TransferRegistryManagementCall;

  constructor(call: TransferRegistryManagementCall) {
    this._call = call;
  }
}

export class UnlockCall extends ethereum.Call {
  get inputs(): UnlockCall__Inputs {
    return new UnlockCall__Inputs(this);
  }

  get outputs(): UnlockCall__Outputs {
    return new UnlockCall__Outputs(this);
  }
}

export class UnlockCall__Inputs {
  _call: UnlockCall;

  constructor(call: UnlockCall) {
    this._call = call;
  }
}

export class UnlockCall__Outputs {
  _call: UnlockCall;

  constructor(call: UnlockCall) {
    this._call = call;
  }
}
